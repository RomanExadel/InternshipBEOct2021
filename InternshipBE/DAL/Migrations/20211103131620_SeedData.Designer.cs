// <auto-generated />
using System;
using DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
    [Migration("20211103154641_SeedData")]
=======
    [Migration("20211103131620_SeedData")]
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CandidateUser", b =>
                {
                    b.Property<int>("CandidatesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CandidatesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CandidateUser");
                });

            modelBuilder.Entity("CountryInternship", b =>
                {
                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.Property<int>("InternshipsId")
                        .HasColumnType("int");

                    b.HasKey("CountriesId", "InternshipsId");

                    b.HasIndex("InternshipsId");

                    b.ToTable("CountryInternship");
                });

            modelBuilder.Entity("DAL.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BestContactTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnglishLevelType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InternshipId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPlanningToJoin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Links")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimarySkill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalCertificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StackType")
                        .HasColumnType("int");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TestTaskEvaluation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.HasIndex("TeamId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            BestContactTime = new DateTime(2021, 11, 3, 15, 46, 38, 765, DateTimeKind.Utc).AddTicks(9446),
=======
                            BestContactTime = new DateTime(2021, 11, 3, 13, 16, 19, 448, DateTimeKind.Utc).AddTicks(3502),
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            CurrentJob = "Student",
                            Education = "Harvard University",
                            Email = "j.snow@gmail.com",
                            EnglishLevelType = 4,
                            FirstName = "John",
                            InternshipId = 1,
                            IsPlanningToJoin = true,
                            LastName = "Snow",
                            Links = "-",
                            Location = "Arizona",
                            OtherInfo = "-",
                            Phone = "+123456789",
                            PrimarySkill = "OOP, C#",
                            ProfessionalCertificates = "-",
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            RegistrationDate = new DateTime(2021, 11, 3, 15, 46, 38, 766, DateTimeKind.Utc).AddTicks(2574),
=======
                            RegistationDate = new DateTime(2021, 11, 3, 13, 16, 19, 448, DateTimeKind.Utc).AddTicks(6962),
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            Skype = "live:j.snow",
                            StackType = 1,
                            StatusType = 0,
                            TeamId = 1,
                            TestTaskEvaluation = 4
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            BestContactTime = new DateTime(2021, 11, 3, 15, 46, 38, 766, DateTimeKind.Utc).AddTicks(4188),
=======
                            BestContactTime = new DateTime(2021, 11, 3, 13, 16, 19, 448, DateTimeKind.Utc).AddTicks(8766),
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            CurrentJob = "Student",
                            Education = "Hogwarts",
                            Email = "h.granger@gmail.com",
                            EnglishLevelType = 5,
                            FirstName = "Hermione",
                            InternshipId = 2,
                            IsPlanningToJoin = true,
                            LastName = "Granger",
                            Links = "-",
                            Location = "London",
                            OtherInfo = "-",
                            Phone = "+2356416789",
                            PrimarySkill = "C++, QA basics",
                            ProfessionalCertificates = "-",
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            RegistrationDate = new DateTime(2021, 11, 3, 15, 46, 38, 766, DateTimeKind.Utc).AddTicks(4194),
=======
                            RegistationDate = new DateTime(2021, 11, 3, 13, 16, 19, 448, DateTimeKind.Utc).AddTicks(8770),
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            Skype = "live:h.granger",
                            StackType = 5,
                            StatusType = 0,
                            TeamId = 2,
                            TestTaskEvaluation = 4
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ukraine"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("SkillId");

                    b.ToTable("Evaluations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeedbackId = 1,
                            SkillId = 1,
                            Value = 4
                        },
                        new
                        {
                            Id = 2,
                            FeedbackId = 2,
                            SkillId = 2,
                            Value = 4
                        });
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnglishLevelType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            Date = new DateTime(2021, 11, 3, 15, 46, 38, 767, DateTimeKind.Utc).AddTicks(4097),
                            Description = "Good knowledge of frameworks, oop, and db",
                            EnglishLevelType = 4,
                            UserId = "767b7e2b-e40f-40a4-98d6-44db0d40ec86"
=======
                            Date = new DateTime(2021, 11, 3, 13, 16, 19, 449, DateTimeKind.Utc).AddTicks(6308),
                            Description = "Good knowledge of frameworks, oop, and db",
                            EnglishLevelType = 4,
                            UserId = "47a8c95e-0b04-4e41-a5af-8d76146d4e32"
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 2,
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            Date = new DateTime(2021, 11, 3, 15, 46, 38, 767, DateTimeKind.Utc).AddTicks(5705),
                            Description = "Excellent candidate",
                            EnglishLevelType = 5,
                            UserId = "767b7e2b-e40f-40a4-98d6-44db0d40ec86"
=======
                            Date = new DateTime(2021, 11, 3, 13, 16, 19, 449, DateTimeKind.Utc).AddTicks(8098),
                            Description = "Excellent candidate",
                            EnglishLevelType = 5,
                            UserId = "47a8c95e-0b04-4e41-a5af-8d76146d4e32"
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                        });
                });

            modelBuilder.Entity("DAL.Entities.Internship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InternshipStatusType")
                        .HasColumnType("int");

                    b.Property<int>("LanguageType")
                        .HasColumnType("int");

                    b.Property<int>("MaxCandidateCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Internships");

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            EndDate = new DateTime(2021, 11, 3, 15, 46, 38, 762, DateTimeKind.Utc).AddTicks(2953),
                            LanguageType = 0,
                            MaxCandidateCount = 50,
                            Name = "JS/>NET",
                            RegistrationFinishDate = new DateTime(2021, 11, 3, 15, 46, 38, 762, DateTimeKind.Utc).AddTicks(5064),
                            RegistrationStartDate = new DateTime(2021, 11, 3, 15, 46, 38, 762, DateTimeKind.Utc).AddTicks(4590),
                            Requirements = "OOP, JS, C#, .Net, Angular/React",
                            StartDate = new DateTime(2021, 11, 3, 15, 46, 38, 762, DateTimeKind.Utc).AddTicks(2224)
=======
                            EndDate = new DateTime(2021, 11, 3, 13, 16, 19, 444, DateTimeKind.Utc).AddTicks(4485),
                            ImageLink = "",
                            InternshipStatusType = 0,
                            LanguageType = 0,
                            MaxCandidateCount = 50,
                            Name = "JS/>NET",
                            RegistrationFinishDate = new DateTime(2021, 11, 3, 13, 16, 19, 444, DateTimeKind.Utc).AddTicks(6871),
                            RegistrationStartDate = new DateTime(2021, 11, 3, 13, 16, 19, 444, DateTimeKind.Utc).AddTicks(6260),
                            Requirements = "OOP, JS, C#, .Net, Angular/React",
                            StartDate = new DateTime(2021, 11, 3, 13, 16, 19, 444, DateTimeKind.Utc).AddTicks(3829)
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            EndDate = new DateTime(2021, 11, 3, 15, 46, 38, 762, DateTimeKind.Utc).AddTicks(6197),
                            LanguageType = 0,
                            MaxCandidateCount = 30,
                            Name = "QA Automation",
                            RegistrationFinishDate = new DateTime(2021, 11, 3, 15, 46, 38, 762, DateTimeKind.Utc).AddTicks(6202),
                            RegistrationStartDate = new DateTime(2021, 11, 3, 15, 46, 38, 762, DateTimeKind.Utc).AddTicks(6200),
                            Requirements = "Any programming language, QA basics",
                            StartDate = new DateTime(2021, 11, 3, 15, 46, 38, 762, DateTimeKind.Utc).AddTicks(6194)
=======
                            EndDate = new DateTime(2021, 11, 3, 13, 16, 19, 444, DateTimeKind.Utc).AddTicks(9170),
                            ImageLink = "",
                            InternshipStatusType = 0,
                            LanguageType = 0,
                            MaxCandidateCount = 30,
                            Name = "QA Automation",
                            RegistrationFinishDate = new DateTime(2021, 11, 3, 13, 16, 19, 444, DateTimeKind.Utc).AddTicks(9174),
                            RegistrationStartDate = new DateTime(2021, 11, 3, 13, 16, 19, 444, DateTimeKind.Utc).AddTicks(9172),
                            Requirements = "Any programming language, QA basics",
                            StartDate = new DateTime(2021, 11, 3, 13, 16, 19, 444, DateTimeKind.Utc).AddTicks(9168)
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                        });
                });

            modelBuilder.Entity("DAL.Entities.InternshipStack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InternshipId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologyStackType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.ToTable("InternshipStacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InternshipId = 1,
                            TechnologyStackType = 1
                        },
                        new
                        {
                            Id = 2,
                            InternshipId = 2,
                            TechnologyStackType = 5
                        });
                });

            modelBuilder.Entity("DAL.Entities.InterviewInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.ToTable("InterviewInvites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            ContactDate = new DateTime(2021, 11, 3, 15, 46, 38, 771, DateTimeKind.Utc).AddTicks(8016),
                            UserId = "767b7e2b-e40f-40a4-98d6-44db0d40ec86"
=======
                            ContactDate = new DateTime(2021, 11, 3, 13, 16, 19, 451, DateTimeKind.Utc).AddTicks(9710),
                            UserId = "47a8c95e-0b04-4e41-a5af-8d76146d4e32"
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 2,
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            ContactDate = new DateTime(2021, 11, 3, 15, 46, 38, 771, DateTimeKind.Utc).AddTicks(8879),
                            UserId = "767b7e2b-e40f-40a4-98d6-44db0d40ec86"
=======
                            ContactDate = new DateTime(2021, 11, 3, 13, 16, 19, 452, DateTimeKind.Utc).AddTicks(367),
                            UserId = "47a8c95e-0b04-4e41-a5af-8d76146d4e32"
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                        });
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsHardSkill")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StackType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsHardSkill = true,
                            Name = "OOP",
                            StackType = 1
                        },
                        new
                        {
                            Id = 2,
                            IsHardSkill = true,
                            Name = "Java",
                            StackType = 5
                        });
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InternshipId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InternshipId = 1,
                            Name = "Team 1 A"
                        },
                        new
                        {
                            Id = 2,
                            InternshipId = 2,
                            Name = "Team 1 B"
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BestContactTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            Id = "767b7e2b-e40f-40a4-98d6-44db0d40ec86",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 3, 15, 46, 38, 674, DateTimeKind.Utc).AddTicks(2943),
                            ConcurrencyStamp = "d88da7d8-a266-433c-ab1f-918bae24264c",
=======
                            Id = "47a8c95e-0b04-4e41-a5af-8d76146d4e32",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 3, 13, 16, 19, 430, DateTimeKind.Utc).AddTicks(2837),
                            ConcurrencyStamp = "446c9caf-927c-4c4d-877a-e671b4b45155",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            Email = "li@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "LI@GMAIL.COM",
                            NormalizedUserName = "MASHA",
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEIUJt2+lx+KZDIlUWQ6lDl58Pz3vQ2uaUlEfY+W0ZJ2y+jcxRwZDOppS7mkj2ZJHxA==",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEJRmJSto7bjN0f753i6LAjgwsBDNTJxO2FUmqOzhh84CaB+TBTTsqYQ3kqdvmYoKeQ==",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            PhoneNumber = "+123656787",
                            PhoneNumberConfirmed = false,
                            Position = "BA",
                            SecurityStamp = "E5BBMDK3I3PX6MZCUDSP2TGQMJNHIOU7",
                            TwoFactorEnabled = false,
                            UserName = "Masha"
                        },
                        new
                        {
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            Id = "052752e0-6905-4756-a476-4752b9cc293e",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 3, 15, 46, 38, 697, DateTimeKind.Utc).AddTicks(7660),
                            ConcurrencyStamp = "bd6fc438-237a-496d-9fcf-4735a6e4296a",
=======
                            Id = "e8030dac-ba98-4078-8214-a13c1e495ed2",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 3, 13, 16, 19, 437, DateTimeKind.Utc).AddTicks(9457),
                            ConcurrencyStamp = "05e349b0-e215-488d-ae1e-15e79b4ddf54",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            Email = "max@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "MAX@GMAIL.COM",
                            NormalizedUserName = "MAXIM",
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEMfi64Q//xK5Jheabs0P9qjC6f9NDTj4lfDs8wVimaGvjD2ulEA6pURP95B3QKGXwQ==",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEMHzgm0ESp2tzD0bIwoJHvOb4w8xy6UbS10awJOYg+1p7+y/aGc4Ukqsiu7PlfA1vQ==",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            PhoneNumber = "+125656787",
                            PhoneNumberConfirmed = false,
                            Position = "Back",
                            SecurityStamp = "M3ZDA3WQP6J2ZVGKBIZHOE7GKC4BR2ZF",
                            TwoFactorEnabled = false,
                            UserName = "Maxim"
                        },
                        new
                        {
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            Id = "be8847a7-036b-41e2-b116-03c5558d93eb",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 3, 15, 46, 38, 713, DateTimeKind.Utc).AddTicks(5423),
                            ConcurrencyStamp = "52fc9af0-69d9-4a42-b0ae-c6703c3a382c",
=======
                            Id = "920482cb-cf4e-4d20-bf12-60bf7ca518f9",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 3, 13, 16, 19, 439, DateTimeKind.Utc).AddTicks(6216),
                            ConcurrencyStamp = "6c2ab4c0-0544-470b-982c-9cafdba49f9e",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            Email = "user@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "DASHA",
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEMuhIL4vvMJztKV6CrBe6dHnQNQ16yVpKvrDh0kLlylNu4Nd5qBltO89GQsrhMIYAQ==",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEOP6zmaLtZ1iXOJMWAPlKRz6aTj+d9vlahloyPhQS5Tf6Ld9vFlVsIpWaTKNumUmMA==",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            PhoneNumber = "+325656787",
                            PhoneNumberConfirmed = false,
                            Position = "Front",
                            SecurityStamp = "YZYNYT3QR6FM5GVYL4VRT3EX3RIOZIFC",
                            TwoFactorEnabled = false,
                            UserName = "Dasha"
                        },
                        new
                        {
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            Id = "4c8c58c5-008f-4fab-81b4-0f217a63987a",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 3, 15, 46, 38, 735, DateTimeKind.Utc).AddTicks(4018),
                            ConcurrencyStamp = "069a9003-07b7-41ab-984e-726cae031bb3",
=======
                            Id = "b9d907e7-2a87-4a15-81fa-089cb5ba2d49",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 3, 13, 16, 19, 441, DateTimeKind.Utc).AddTicks(2681),
                            ConcurrencyStamp = "bbd32173-cf2e-419c-af46-40f06a9589ae",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ALEXANDR",
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEKnn7F1adtBX1AdpjXSz5Qk5zrV3kZdjRMXnULD+pJaWbGWXuI3Fvugvh8e3TVfh7Q==",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEN8hIGZCVfsfVxpf/e9HsEAvTwFR+KIalnMV/HeAA8RBUprw48sY+rg5pha6RNB8sg==",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            PhoneNumber = "+325659787",
                            PhoneNumberConfirmed = false,
                            Position = "PO",
                            SecurityStamp = "UINKYYTOYHJBL2UH6XWJROSF5RXQPAGS",
                            TwoFactorEnabled = false,
                            UserName = "Alexandr"
                        });
                });

            modelBuilder.Entity("InternshipUser", b =>
                {
                    b.Property<int>("InternshipsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InternshipsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("InternshipUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            Id = "7c076e64-7368-44b4-a32e-2294279df973",
                            ConcurrencyStamp = "b231e667-c6d9-4e3e-8bbc-8ced8a6c760f",
=======
                            Id = "abcb08cb-16a5-4ea5-a7fe-8adddcf5704d",
                            ConcurrencyStamp = "8abb15cc-24a4-49bd-8405-750cd99efd03",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            Name = "Hr",
                            NormalizedName = "HR"
                        },
                        new
                        {
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            Id = "1b60e198-fa28-417c-b842-f51802f0315b",
                            ConcurrencyStamp = "c0f577e6-a670-472e-84d4-fe624e7f99ea",
=======
                            Id = "2776c323-3731-4f62-9e06-762f503dd32a",
                            ConcurrencyStamp = "4531ed4d-d5e8-4a2c-a67b-a607ef8137b1",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            Name = "Interviewer",
                            NormalizedName = "INTERVIEWER"
                        },
                        new
                        {
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            Id = "02317d2f-20b6-4892-9c18-8fac51bbd654",
                            ConcurrencyStamp = "40031a98-d2b1-4325-a42e-e4bf3f8ac3fb",
=======
                            Id = "fb8cf41d-49de-4965-b3b3-648609cff7ed",
                            ConcurrencyStamp = "f93db7a6-7134-461f-beb1-0749fd049f98",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            Id = "637bc525-e34c-4451-b3da-a37d4b409691",
                            ConcurrencyStamp = "ffdc0dc2-217e-4efa-95c2-b6edb0ece3eb",
=======
                            Id = "dabce6c6-e061-4571-9c41-759105709566",
                            ConcurrencyStamp = "531fe6d1-3aeb-4ba1-a353-d9beeeea3ab5",
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD:InternshipBE/DAL/Migrations/20211103154641_SeedData.Designer.cs
                            UserId = "767b7e2b-e40f-40a4-98d6-44db0d40ec86",
                            RoleId = "7c076e64-7368-44b4-a32e-2294279df973"
                        },
                        new
                        {
                            UserId = "052752e0-6905-4756-a476-4752b9cc293e",
                            RoleId = "1b60e198-fa28-417c-b842-f51802f0315b"
                        },
                        new
                        {
                            UserId = "be8847a7-036b-41e2-b116-03c5558d93eb",
                            RoleId = "02317d2f-20b6-4892-9c18-8fac51bbd654"
                        },
                        new
                        {
                            UserId = "4c8c58c5-008f-4fab-81b4-0f217a63987a",
                            RoleId = "637bc525-e34c-4451-b3da-a37d4b409691"
=======
                            UserId = "47a8c95e-0b04-4e41-a5af-8d76146d4e32",
                            RoleId = "abcb08cb-16a5-4ea5-a7fe-8adddcf5704d"
                        },
                        new
                        {
                            UserId = "e8030dac-ba98-4078-8214-a13c1e495ed2",
                            RoleId = "2776c323-3731-4f62-9e06-762f503dd32a"
                        },
                        new
                        {
                            UserId = "920482cb-cf4e-4d20-bf12-60bf7ca518f9",
                            RoleId = "fb8cf41d-49de-4965-b3b3-648609cff7ed"
                        },
                        new
                        {
                            UserId = "b9d907e7-2a87-4a15-81fa-089cb5ba2d49",
                            RoleId = "dabce6c6-e061-4571-9c41-759105709566"
>>>>>>> e77c43a (Added new columns and data to internship table):InternshipBE/DAL/Migrations/20211103131620_SeedData.Designer.cs
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeamsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("CandidateUser", b =>
                {
                    b.HasOne("DAL.Entities.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryInternship", b =>
                {
                    b.HasOne("DAL.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Internship", null)
                        .WithMany()
                        .HasForeignKey("InternshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Candidate", b =>
                {
                    b.HasOne("DAL.Entities.Internship", "Internship")
                        .WithMany("Candidates")
                        .HasForeignKey("InternshipId");

                    b.HasOne("DAL.Entities.Team", "Team")
                        .WithMany("Candidates")
                        .HasForeignKey("TeamId");

                    b.Navigation("Internship");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DAL.Entities.Evaluation", b =>
                {
                    b.HasOne("DAL.Entities.Feedback", "Feedback")
                        .WithMany("Evaluations")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("Evaluations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.HasOne("DAL.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Candidate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.InternshipStack", b =>
                {
                    b.HasOne("DAL.Entities.Internship", "Internship")
                        .WithMany("InternshipStacks")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("DAL.Entities.InterviewInvite", b =>
                {
                    b.HasOne("DAL.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Candidate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.HasOne("DAL.Entities.Internship", "Internship")
                        .WithMany("Teams")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("InternshipUser", b =>
                {
                    b.HasOne("DAL.Entities.Internship", null)
                        .WithMany()
                        .HasForeignKey("InternshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("DAL.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("DAL.Entities.Internship", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("InternshipStacks");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.Navigation("Candidates");
                });
#pragma warning restore 612, 618
        }
    }
}
