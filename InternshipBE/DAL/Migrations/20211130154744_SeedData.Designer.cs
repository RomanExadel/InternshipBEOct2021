// <auto-generated />
using System;
using DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211130154744_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CandidateUser", b =>
                {
                    b.Property<int>("CandidatesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CandidatesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CandidateUser");
                });

            modelBuilder.Entity("CountryInternship", b =>
                {
                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.Property<int>("InternshipsId")
                        .HasColumnType("int");

                    b.HasKey("CountriesId", "InternshipsId");

                    b.HasIndex("InternshipsId");

                    b.ToTable("CountryInternship");
                });

            modelBuilder.Entity("DAL.Entities.BestContactTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BestContactTimes");
                });

            modelBuilder.Entity("DAL.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BestContactTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnglishLevelType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InternshipId")
                        .HasColumnType("int");

                    b.Property<int?>("InternshipLanguage")
                        .HasColumnType("int");

                    b.Property<bool>("IsPlanningToJoin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Links")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimarySkill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalCertificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StackType")
                        .HasColumnType("int");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TestTaskEvaluation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.HasIndex("TeamId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BestContactTime = new DateTime(2021, 11, 30, 15, 47, 42, 943, DateTimeKind.Utc).AddTicks(6348),
                            CurrentJob = "Student",
                            Education = "Harvard University",
                            Email = "j.snow@gmail.com",
                            EnglishLevelType = 4,
                            FirstName = "John",
                            InternshipId = 1,
                            IsPlanningToJoin = true,
                            LastName = "Snow",
                            Links = "-",
                            Location = "USA",
                            OtherInfo = "-",
                            Phone = "+123456789",
                            PrimarySkill = "OOP, C#",
                            ProfessionalCertificates = "-",
                            RegistrationDate = new DateTime(2021, 11, 30, 15, 47, 42, 944, DateTimeKind.Utc).AddTicks(1681),
                            Skype = "live:j.snow",
                            StackType = 1,
                            StatusType = 0,
                            TeamId = 1,
                            TestTaskEvaluation = 4
                        },
                        new
                        {
                            Id = 2,
                            BestContactTime = new DateTime(2021, 11, 30, 15, 47, 42, 944, DateTimeKind.Utc).AddTicks(3746),
                            CurrentJob = "Student",
                            Education = "Hogwarts",
                            Email = "h.granger@gmail.com",
                            EnglishLevelType = 5,
                            FirstName = "Hermione",
                            InternshipId = 2,
                            IsPlanningToJoin = true,
                            LastName = "Granger",
                            Links = "-",
                            Location = "UK",
                            OtherInfo = "-",
                            Phone = "+2356416789",
                            PrimarySkill = "C++, QA basics",
                            ProfessionalCertificates = "-",
                            RegistrationDate = new DateTime(2021, 11, 30, 15, 47, 42, 944, DateTimeKind.Utc).AddTicks(3749),
                            Skype = "live:h.granger",
                            StackType = 5,
                            StatusType = 0,
                            TeamId = 2,
                            TestTaskEvaluation = 4
                        });
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ukraine"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("SkillId");

                    b.ToTable("Evaluations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeedbackId = 1,
                            SkillId = 1,
                            Value = 4
                        },
                        new
                        {
                            Id = 2,
                            FeedbackId = 2,
                            SkillId = 2,
                            Value = 4
                        });
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnglishLevelType")
                        .HasColumnType("int");

                    b.Property<int>("FinalEvaluation")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            Date = new DateTime(2021, 11, 30, 15, 47, 42, 945, DateTimeKind.Utc).AddTicks(1452),
                            Description = "Good knowledge of frameworks, oop, and db",
                            EnglishLevelType = 4,
                            FinalEvaluation = 1,
                            UserId = "d572ee4d-2e42-4c15-adda-70ddd4935684"
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 2,
                            Date = new DateTime(2021, 11, 30, 15, 47, 42, 945, DateTimeKind.Utc).AddTicks(2665),
                            Description = "Excellent candidate",
                            EnglishLevelType = 5,
                            FinalEvaluation = 2,
                            UserId = "d572ee4d-2e42-4c15-adda-70ddd4935684"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Internship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InternshipStatusType")
                        .HasColumnType("int");

                    b.Property<int>("MaxCandidateCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpreadSheetId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Internships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(1917),
                            ImageLink = "https://drive.google.com/uc?export=view&id=1tH7hcl7K2kM4HHC6QVXRdq0LPU8yZwd9",
                            InternshipStatusType = 0,
                            MaxCandidateCount = 50,
                            Name = "JS/.NET",
                            RegistrationFinishDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(3827),
                            RegistrationStartDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(3375),
                            Requirements = "OOP, JS, C#, .Net, Angular/React",
                            SpreadSheetId = "1nhQ98ChhQRfYQWQ2Rf6oyVpjyLetHq34V8muxMvwzSA",
                            StartDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(1378)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5562),
                            ImageLink = "https://drive.google.com/uc?export=view&id=1bvaKnWq0XEuldc4zry3qnrFtZoNRtW5R",
                            InternshipStatusType = 0,
                            MaxCandidateCount = 30,
                            Name = "QA Automation",
                            RegistrationFinishDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5565),
                            RegistrationStartDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5565),
                            Requirements = "Any programming language, QA basics",
                            SpreadSheetId = "1wdTLLMb8cWVQWpEfJafJCRL1eEF17kE1QQ1jYZGjw6A",
                            StartDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5562)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5568),
                            ImageLink = "https://drive.google.com/uc?export=view&id=1kirFfIPPxUbgOFNGNAk4CL6jf_lEOSKc",
                            InternshipStatusType = 0,
                            MaxCandidateCount = 30,
                            Name = "GameDev",
                            RegistrationFinishDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5571),
                            RegistrationStartDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5571),
                            Requirements = "OOP, Unity, C#, SQL",
                            SpreadSheetId = "1XSY0mwxSWPA1pXT4VteUoM4UTbuhn2LaqofeK6_7zuo",
                            StartDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5568)
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5574),
                            ImageLink = "https://drive.google.com/uc?export=view&id=1t-eClTKmOY4asHZkT6y_vvJNR4SMzKbB",
                            InternshipStatusType = 0,
                            MaxCandidateCount = 30,
                            Name = "Angular/.NET",
                            RegistrationFinishDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5574),
                            RegistrationStartDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5574),
                            Requirements = "OOP, JS, C#, .Net, Angular/React",
                            SpreadSheetId = "1RW1QxFSlyfGUnm0c-rGGr2_suo_MXrn1e_pUuLSV2tc",
                            StartDate = new DateTime(2021, 11, 30, 15, 47, 42, 940, DateTimeKind.Utc).AddTicks(5574)
                        });
                });

            modelBuilder.Entity("DAL.Entities.InternshipLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InternshipId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.ToTable("InternshipLanguages");
                });

            modelBuilder.Entity("DAL.Entities.InternshipStack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InternshipId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologyStackType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.ToTable("InternshipStacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TechnologyStackType = 0
                        },
                        new
                        {
                            Id = 2,
                            TechnologyStackType = 1
                        },
                        new
                        {
                            Id = 3,
                            TechnologyStackType = 2
                        },
                        new
                        {
                            Id = 4,
                            TechnologyStackType = 3
                        },
                        new
                        {
                            Id = 5,
                            TechnologyStackType = 4
                        },
                        new
                        {
                            Id = 6,
                            TechnologyStackType = 5
                        });
                });

            modelBuilder.Entity("DAL.Entities.InterviewInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.ToTable("InterviewInvites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            ContactDate = new DateTime(2021, 11, 30, 15, 47, 42, 946, DateTimeKind.Utc).AddTicks(8388),
                            UserId = "d572ee4d-2e42-4c15-adda-70ddd4935684"
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 2,
                            ContactDate = new DateTime(2021, 11, 30, 15, 47, 42, 946, DateTimeKind.Utc).AddTicks(8863),
                            UserId = "d572ee4d-2e42-4c15-adda-70ddd4935684"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsHardSkill")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StackType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsHardSkill = true,
                            Name = "OOP",
                            StackType = 1
                        },
                        new
                        {
                            Id = 2,
                            IsHardSkill = true,
                            Name = "Java",
                            StackType = 5
                        });
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InternshipId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InternshipId = 1,
                            Name = "Team 1 A"
                        },
                        new
                        {
                            Id = 2,
                            InternshipId = 2,
                            Name = "Team 1 B"
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d572ee4d-2e42-4c15-adda-70ddd4935684",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e4811a9-84e6-45fd-92b3-88e0c412dbb0",
                            Email = "admntest.team5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMNTEST.TEAM5@GMAIL.COM",
                            NormalizedUserName = "PETER PETROV",
                            PasswordHash = "AQAAAAEAACcQAAAAEBOQBAlrFUhYjPywJbRGGmLGaKCI+23KPd+odSDLjBZvCz0TpzQFFnuHfyvNXtBLxQ==",
                            PhoneNumber = "+123656787",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Education Centre",
                            RoleType = 4,
                            SecurityStamp = "E5BBMDK3I3PX6MZCUDSP2TGQMJNHIOU7",
                            TwoFactorEnabled = false,
                            UserName = "Peter Petrov"
                        },
                        new
                        {
                            Id = "c7edb369-1f85-4056-9a33-33d1f976093c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d2acba2-df4a-4ff1-a2df-d4466752a868",
                            Email = "hrlily.team5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "HRLILY.TEAM5@GMAIL.COM",
                            NormalizedUserName = "LILY IVANOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEAt+FZwb+HGZ/9XDZwbJqXka5+18BZOpIK+8d4mYSDUOfHFjU0aQsSx1pmBskBKErQ==",
                            PhoneNumber = "+125656787",
                            PhoneNumberConfirmed = false,
                            Position = "Recruiter",
                            RoleType = 1,
                            SecurityStamp = "M3ZDA3WQP6J2ZVGKBIZHOE7GKC4BR2ZF",
                            TwoFactorEnabled = false,
                            UserName = "Lily Ivanova"
                        },
                        new
                        {
                            Id = "ed8a75f6-e5f6-4f95-8a48-af14f3034369",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0452ae0b-66e3-4500-9e74-cad2a0e22896",
                            Email = "interviewer.team5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "INTERVIEWER.TEAM5@GMAIL.COM",
                            NormalizedUserName = "IVAN SIDOROV",
                            PasswordHash = "AQAAAAEAACcQAAAAEK5oVdXA4Ch9+QRdY48JssFwjnTcnmU1BzZzuIpM+Lzcyn8uebwwq9IluhNEDACISA==",
                            PhoneNumber = "+325656787",
                            PhoneNumberConfirmed = false,
                            Position = "Senior .NET",
                            RoleType = 2,
                            SecurityStamp = "YZYNYT3QR6FM5GVYL4VRT3EX3RIOZIFC",
                            TwoFactorEnabled = false,
                            UserName = "Ivan Sidorov"
                        },
                        new
                        {
                            Id = "4104e4f4-ce78-4a45-82f3-113df0811f03",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e24770cc-91fd-4f50-b434-8234c6bd01e9",
                            Email = "managertest.team5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "MANAGERTEST.TEAM5@GMAIL.COM",
                            NormalizedUserName = "ANN GREEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKeVd57pOOpH3UfrQJkRw5JOcaG4e8CQW2OZihdnMkUmsQ333YMpsXH2bg2RSiSkdA==",
                            PhoneNumber = "+325659787",
                            PhoneNumberConfirmed = false,
                            Position = "Deputy of Head of Education Center",
                            RoleType = 3,
                            SecurityStamp = "UINKYYTOYHJBL2UH6XWJROSF5RXQPAGS",
                            TwoFactorEnabled = false,
                            UserName = "Ann Green"
                        },
                        new
                        {
                            Id = "ec4d6094-4300-404f-b7c3-a837e3da843c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7081980e-5229-4f82-8d34-d46a06853827",
                            Email = "mentortest.team5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "MENTORTEST.TEAM5@GMAIL.COM",
                            NormalizedUserName = "BORIS BOBROV",
                            PasswordHash = "AQAAAAEAACcQAAAAEEFDNQvKjCrj4EmZ4WpdnX1Nv1p3vw8MxM6X6rILaJvt6ljAarGiuirnOZK0k2NEAQ==",
                            PhoneNumber = "+7777777777777777",
                            PhoneNumberConfirmed = false,
                            Position = "Senior .NET/JS",
                            RoleType = 0,
                            SecurityStamp = "UINKYYTOYHJBL2UH6XWJROSF5RXQPAGS",
                            TwoFactorEnabled = false,
                            UserName = "Boris Bobrov"
                        });
                });

            modelBuilder.Entity("InternshipUser", b =>
                {
                    b.Property<int>("InternshipsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InternshipsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("InternshipUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "8c39a209-2c5e-4b1d-bf1d-37a4adb2d2d3",
                            ConcurrencyStamp = "b4572c8a-155e-4063-a9e2-d23225101605",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "525d104d-0b93-43eb-ab47-318e58fbb1ca",
                            ConcurrencyStamp = "7631b301-f507-439c-9e8f-1f2b1d0e8eb2",
                            Name = "Hr",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = "bb23c02a-13e8-483c-9ab4-5bea635e6730",
                            ConcurrencyStamp = "ea651cfd-f64d-40e9-9e79-81ae657fabfc",
                            Name = "Interviewer",
                            NormalizedName = "INTERVIEWER"
                        },
                        new
                        {
                            Id = "e94b2fff-503d-487a-ade1-843dc780c5b3",
                            ConcurrencyStamp = "4bb0f5f2-2224-4509-9aab-9f156e7f51f1",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "a1952cab-633b-45e1-bef5-7703198b8666",
                            ConcurrencyStamp = "0e89b2ea-c69f-4b21-ad96-49211c4b2ebf",
                            Name = "Mentor",
                            NormalizedName = "MENTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "d572ee4d-2e42-4c15-adda-70ddd4935684",
                            RoleId = "8c39a209-2c5e-4b1d-bf1d-37a4adb2d2d3"
                        },
                        new
                        {
                            UserId = "c7edb369-1f85-4056-9a33-33d1f976093c",
                            RoleId = "525d104d-0b93-43eb-ab47-318e58fbb1ca"
                        },
                        new
                        {
                            UserId = "ed8a75f6-e5f6-4f95-8a48-af14f3034369",
                            RoleId = "bb23c02a-13e8-483c-9ab4-5bea635e6730"
                        },
                        new
                        {
                            UserId = "4104e4f4-ce78-4a45-82f3-113df0811f03",
                            RoleId = "e94b2fff-503d-487a-ade1-843dc780c5b3"
                        },
                        new
                        {
                            UserId = "ec4d6094-4300-404f-b7c3-a837e3da843c",
                            RoleId = "a1952cab-633b-45e1-bef5-7703198b8666"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeamsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("CandidateUser", b =>
                {
                    b.HasOne("DAL.Entities.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryInternship", b =>
                {
                    b.HasOne("DAL.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Internship", null)
                        .WithMany()
                        .HasForeignKey("InternshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.BestContactTime", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("BestContactTimes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Candidate", b =>
                {
                    b.HasOne("DAL.Entities.Internship", "Internship")
                        .WithMany("Candidates")
                        .HasForeignKey("InternshipId");

                    b.HasOne("DAL.Entities.Team", "Team")
                        .WithMany("Candidates")
                        .HasForeignKey("TeamId");

                    b.Navigation("Internship");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DAL.Entities.Evaluation", b =>
                {
                    b.HasOne("DAL.Entities.Feedback", "Feedback")
                        .WithMany("Evaluations")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("Evaluations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.HasOne("DAL.Entities.Candidate", "Candidate")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId");

                    b.Navigation("Candidate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.InternshipLanguage", b =>
                {
                    b.HasOne("DAL.Entities.Internship", "Internship")
                        .WithMany("LanguageTypes")
                        .HasForeignKey("InternshipId");

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("DAL.Entities.InternshipStack", b =>
                {
                    b.HasOne("DAL.Entities.Internship", "Internship")
                        .WithMany("InternshipStacks")
                        .HasForeignKey("InternshipId");

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("DAL.Entities.InterviewInvite", b =>
                {
                    b.HasOne("DAL.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Candidate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.HasOne("DAL.Entities.Internship", "Internship")
                        .WithMany("Teams")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("InternshipUser", b =>
                {
                    b.HasOne("DAL.Entities.Internship", null)
                        .WithMany()
                        .HasForeignKey("InternshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("DAL.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Candidate", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("DAL.Entities.Internship", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("InternshipStacks");

                    b.Navigation("LanguageTypes");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("BestContactTimes");

                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
