// <auto-generated />
using System;
using DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CandidateUser", b =>
                {
                    b.Property<int>("CandidatesId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CandidatesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CandidateUser");
                });

            modelBuilder.Entity("DAL.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BestContactTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnglishLevelType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InternshipId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPlanningToJoin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Links")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimarySkill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalCertificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StackType")
                        .HasColumnType("int");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TestTaskEvaluation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.HasIndex("TeamId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BestContactTime = new DateTime(2021, 11, 1, 15, 30, 36, 764, DateTimeKind.Utc).AddTicks(665),
                            CurrentJob = "Student",
                            Education = "Harvard University",
                            Email = "j.snow@gmail.com",
                            EnglishLevelType = 4,
                            FirstName = "John",
                            InternshipId = 1,
                            IsPlanningToJoin = true,
                            LastName = "Snow",
                            Links = "-",
                            Location = "Arizona",
                            OtherInfo = "-",
                            Phone = "+123456789",
                            PrimarySkill = "OOP, C#",
                            ProfessionalCertificates = "-",
                            RegistationDate = new DateTime(2021, 11, 1, 15, 30, 36, 764, DateTimeKind.Utc).AddTicks(3770),
                            Skype = "live:j.snow",
                            StackType = 1,
                            StatusType = 0,
                            TestTaskEvaluation = 4
                        },
                        new
                        {
                            Id = 2,
                            BestContactTime = new DateTime(2021, 11, 1, 15, 30, 36, 764, DateTimeKind.Utc).AddTicks(4778),
                            CurrentJob = "Student",
                            Education = "Hogwarts",
                            Email = "h.granger@gmail.com",
                            EnglishLevelType = 5,
                            FirstName = "Hermione",
                            InternshipId = 2,
                            IsPlanningToJoin = true,
                            LastName = "Granger",
                            Links = "-",
                            Location = "London",
                            OtherInfo = "-",
                            Phone = "+2356416789",
                            PrimarySkill = "C++, QA basics",
                            ProfessionalCertificates = "-",
                            RegistationDate = new DateTime(2021, 11, 1, 15, 30, 36, 764, DateTimeKind.Utc).AddTicks(4781),
                            Skype = "live:h.granger",
                            StackType = 5,
                            StatusType = 0,
                            TestTaskEvaluation = 4
                        });
                });

            modelBuilder.Entity("DAL.Entities.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("SkillId");

                    b.ToTable("Evaluations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeedbackId = 1,
                            SkillId = 1,
                            Value = 4
                        },
                        new
                        {
                            Id = 2,
                            FeedbackId = 2,
                            SkillId = 2,
                            Value = 4
                        });
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnglishLevelType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            Date = new DateTime(2021, 11, 1, 15, 30, 36, 765, DateTimeKind.Utc).AddTicks(4717),
                            Description = "Good knowledge of frameworks, oop, and db",
                            EnglishLevelType = 4,
                            UserId = "3827e25d-8989-4881-9f25-807d14878c1b"
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 2,
                            Date = new DateTime(2021, 11, 1, 15, 30, 36, 765, DateTimeKind.Utc).AddTicks(7392),
                            Description = "Excellent candidate",
                            EnglishLevelType = 5,
                            UserId = "3827e25d-8989-4881-9f25-807d14878c1b"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Internship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LanguageType")
                        .HasColumnType("int");

                    b.Property<int>("MaxCandidateCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Internships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2021, 11, 1, 15, 30, 36, 761, DateTimeKind.Utc).AddTicks(4053),
                            LanguageType = 0,
                            MaxCandidateCount = 50,
                            Name = "JS/>NET",
                            RegistrationFinishDate = new DateTime(2021, 11, 1, 15, 30, 36, 761, DateTimeKind.Utc).AddTicks(6540),
                            RegistrationStartDate = new DateTime(2021, 11, 1, 15, 30, 36, 761, DateTimeKind.Utc).AddTicks(5994),
                            Requirements = "OOP, JS, C#, .Net, Angular/React",
                            StartDate = new DateTime(2021, 11, 1, 15, 30, 36, 761, DateTimeKind.Utc).AddTicks(3283)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2021, 11, 1, 15, 30, 36, 761, DateTimeKind.Utc).AddTicks(7558),
                            LanguageType = 0,
                            MaxCandidateCount = 30,
                            Name = "QA Automation",
                            RegistrationFinishDate = new DateTime(2021, 11, 1, 15, 30, 36, 761, DateTimeKind.Utc).AddTicks(7562),
                            RegistrationStartDate = new DateTime(2021, 11, 1, 15, 30, 36, 761, DateTimeKind.Utc).AddTicks(7561),
                            Requirements = "Any programming language, QA basics",
                            StartDate = new DateTime(2021, 11, 1, 15, 30, 36, 761, DateTimeKind.Utc).AddTicks(7556)
                        });
                });

            modelBuilder.Entity("DAL.Entities.InternshipStack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InternshipId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologyStackType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.ToTable("InternshipStacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InternshipId = 1,
                            TechnologyStackType = 1
                        },
                        new
                        {
                            Id = 2,
                            InternshipId = 2,
                            TechnologyStackType = 5
                        });
                });

            modelBuilder.Entity("DAL.Entities.InterviewInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.ToTable("InterviewInvites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateId = 1,
                            ContactDate = new DateTime(2021, 11, 1, 15, 30, 36, 768, DateTimeKind.Utc).AddTicks(3643),
                            UserId = "3827e25d-8989-4881-9f25-807d14878c1b"
                        },
                        new
                        {
                            Id = 2,
                            CandidateId = 2,
                            ContactDate = new DateTime(2021, 11, 1, 15, 30, 36, 768, DateTimeKind.Utc).AddTicks(4401),
                            UserId = "3827e25d-8989-4881-9f25-807d14878c1b"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsHardSkill")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StackType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsHardSkill = true,
                            Name = "OOP",
                            StackType = 1
                        },
                        new
                        {
                            Id = 2,
                            IsHardSkill = true,
                            Name = "Java",
                            StackType = 5
                        });
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InternshipId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InternshipId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InternshipId = 1,
                            Name = "Team 1 A"
                        },
                        new
                        {
                            Id = 2,
                            InternshipId = 2,
                            Name = "Team 1 B"
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BestContactTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3827e25d-8989-4881-9f25-807d14878c1b",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 1, 15, 30, 36, 758, DateTimeKind.Utc).AddTicks(8404),
                            ConcurrencyStamp = "d722e70d-72fc-4f08-8fdc-afec3cef3c4f",
                            Email = "li@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "LI@GMAIL.COM",
                            NormalizedUserName = "MASHA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFrfBeLl7wG60Syi2unYkVUM4kp/0A8RAZdc51M8e/5GokOv0qDZF+aGBSVaSV6vag==",
                            PhoneNumber = "+123656787",
                            PhoneNumberConfirmed = false,
                            Position = "BA",
                            SecurityStamp = "E5BBMDK3I3PX6MZCUDSP2TGQMJNHIOU7",
                            TwoFactorEnabled = false,
                            UserName = "Masha"
                        },
                        new
                        {
                            Id = "5516d40a-40bf-482c-8575-34a18478ac89",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 1, 15, 30, 36, 758, DateTimeKind.Utc).AddTicks(9788),
                            ConcurrencyStamp = "2c39a495-1b10-49f9-926c-a40d078418ad",
                            Email = "max@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "MAX@GMAIL.COM",
                            NormalizedUserName = "MAXIM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA/2Sy0cS1B+wbGk2R/Llrp6iuFzZjbJGu1Egoj2MYPPMaowQUgECV4Teg/K5xy/fg==",
                            PhoneNumber = "+125656787",
                            PhoneNumberConfirmed = false,
                            Position = "Back",
                            SecurityStamp = "M3ZDA3WQP6J2ZVGKBIZHOE7GKC4BR2ZF",
                            TwoFactorEnabled = false,
                            UserName = "Maxim"
                        },
                        new
                        {
                            Id = "57f2fe4e-64af-40b4-a279-5af5f1db8a8a",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 1, 15, 30, 36, 758, DateTimeKind.Utc).AddTicks(9822),
                            ConcurrencyStamp = "09fb73b8-aab6-4ff4-a27b-4426a8b73570",
                            Email = "user@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "DASHA",
                            PasswordHash = "AQAAAAEAACcQAAAAEEVFxbsq/jnZ4avRoKtiCKb4QPzojCZDr6y9N3exNngtHExLdISgHDxhvprupVr9iQ==",
                            PhoneNumber = "+325656787",
                            PhoneNumberConfirmed = false,
                            Position = "Front",
                            SecurityStamp = "YZYNYT3QR6FM5GVYL4VRT3EX3RIOZIFC",
                            TwoFactorEnabled = false,
                            UserName = "Dasha"
                        },
                        new
                        {
                            Id = "ff8a8331-c30a-4a6c-8860-0b49c533aa2c",
                            AccessFailedCount = 0,
                            BestContactTime = new DateTime(2021, 11, 1, 15, 30, 36, 758, DateTimeKind.Utc).AddTicks(9839),
                            ConcurrencyStamp = "66f70ef0-1083-48a6-9c14-d54557737744",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ALEXANDR",
                            PasswordHash = "AQAAAAEAACcQAAAAEK+m9ZBEt0HpxkxRafiiKjUsm1GShqzdyFWgzC1tGIApjSTzcLx49pKc1wIKrgN0tg==",
                            PhoneNumber = "+325659787",
                            PhoneNumberConfirmed = false,
                            Position = "PO",
                            SecurityStamp = "UINKYYTOYHJBL2UH6XWJROSF5RXQPAGS",
                            TwoFactorEnabled = false,
                            UserName = "Alexandr"
                        });
                });

            modelBuilder.Entity("InternshipUser", b =>
                {
                    b.Property<int>("InternshipsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InternshipsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("InternshipUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<int>("TeamsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TeamsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TeamUser");
                });

            modelBuilder.Entity("CandidateUser", b =>
                {
                    b.HasOne("DAL.Entities.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Candidate", b =>
                {
                    b.HasOne("DAL.Entities.Internship", "Internship")
                        .WithMany("Candidates")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Team", "Team")
                        .WithMany("Candidates")
                        .HasForeignKey("TeamId");

                    b.Navigation("Internship");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DAL.Entities.Evaluation", b =>
                {
                    b.HasOne("DAL.Entities.Feedback", "Feedback")
                        .WithMany("Evaluations")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Skill", "Skill")
                        .WithMany("Evaluations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.HasOne("DAL.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Candidate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.InternshipStack", b =>
                {
                    b.HasOne("DAL.Entities.Internship", "Internship")
                        .WithMany("InternshipStacks")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("DAL.Entities.InterviewInvite", b =>
                {
                    b.HasOne("DAL.Entities.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Candidate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.HasOne("DAL.Entities.Internship", "Internship")
                        .WithMany("Teams")
                        .HasForeignKey("InternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("InternshipUser", b =>
                {
                    b.HasOne("DAL.Entities.Internship", null)
                        .WithMany()
                        .HasForeignKey("InternshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("DAL.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("DAL.Entities.Internship", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("InternshipStacks");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DAL.Entities.Skill", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("DAL.Entities.Team", b =>
                {
                    b.Navigation("Candidates");
                });
#pragma warning restore 612, 618
        }
    }
}
